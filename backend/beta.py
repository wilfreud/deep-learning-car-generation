# -*- coding: utf-8 -*-
"""projet-deep-learning-cars.ipynb

Automatically generated by Colab.
"""

# Installations nécessaires (à décommenter si besoin)
# !pip install diffusers transformers accelerate scikit-learn

import shutil
import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from tensorflow import keras
from tensorflow.keras import layers
import joblib  # Pour sauvegarder le préprocesseur

# 1. Importation des données
destination = os.getcwd()
zip_file_path = './Voitures.zip'
source = 'drive/MyDrive/Shared/Voitures.zip'

if not os.path.exists(zip_file_path):
    shutil.copy2(source, destination)

# Extraction des données
with ZipFile(zip_file_path, 'r') as zObject:
    zObject.extractall(path=".")

# Chargement des données
file_path = "./vehicles.csv"
df = pd.read_csv(file_path, usecols=['price', 'year', 'manufacturer', 'model', 'condition', 'cylinders', 'size', 'type', 'paint_color', 'state', 'description'])

# Nettoyage
df.dropna(inplace=True)
df = df.reset_index(drop=True)

# 2. Préprocessing avancé
# Définition des colonnes
numeric_features = ['year']
categorical_features = ['manufacturer', 'model', 'condition', 'cylinders', 'size', 'type', 'paint_color', 'state']

# Création du préprocesseur
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

# Split des données
X = df.drop(columns=['price', 'description'])
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Application du préprocessing
X_train_processed = preprocessor.fit_transform(X_train)
X_test_processed = preprocessor.transform(X_test)

# 3. Modèle Deep Learning amélioré
model = keras.Sequential([
    layers.Dense(128, activation='relu', kernel_regularizer='l2', input_shape=(X_train_processed.shape[1],)),
    layers.Dropout(0.3),
    layers.Dense(64, activation='relu'),
    layers.Dense(32, activation='relu'),
    layers.Dense(1)
])

model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# Callbacks
early_stopping = keras.callbacks.EarlyStopping(patience=5)
reduce_lr = keras.callbacks.ReduceLROnPlateau(factor=0.1, patience=3)

# Entraînement
history = model.fit(
    X_train_processed, y_train,
    epochs=100,
    batch_size=64,
    validation_data=(X_test_processed, y_test),
    callbacks=[early_stopping, reduce_lr]
)

# Évaluation finale
loss, mae = model.evaluate(X_test_processed, y_test)
print(f"Test MAE: {mae:.2f} $")

# 4. Exportation
model.save("car_price_model.keras")
joblib.dump(preprocessor, "preprocessor.joblib")  # Pour le préprocesseur