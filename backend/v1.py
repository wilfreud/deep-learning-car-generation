import numpy as np
import keras
from diffusers import StableDiffusionPipeline
import os
import random
import string

model_path = "v1.keras"
model = keras.saving.load_model(model_path)
print("‚úÖ Mod√®le de pr√©diction charg√©.")

# Charger Stable Diffusion
pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")
pipe.to("cuda")  # Utiliser le GPU si disponible
print("‚úÖ Mod√®le Stable Diffusion charg√©.")

def generate_random_filename(extension="png"):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=8)) + f".{extension}"

# Fonction pour pr√©dire le prix et g√©n√©rer une image
def generate_car_image(features, description, promt="Une mercedes benz √† 1500000 USD"):
    predicted_price = model.predict(np.array(features).reshape(1, -1))[0][0]
    prompt = f"Voiture {description}, estim√©e √† {int(predicted_price)}‚Ç¨, design moderne et d√©taill√©"
    
    print(f"üöó G√©n√©ration de l'image pour : {prompt}")
    image = pipe(prompt).images[0]
    
    # Afficher et sauvegarder l'image
    image.show()


    random_filename = generate_random_filename()
    image.save(random_filename)
    print(f"‚úÖ Image g√©n√©r√©e et sauvegard√©e sous '{random_filename}'.")
    image.save("generated_car.png")
    print("‚úÖ Image g√©n√©r√©e et sauvegard√©e sous 'generated_car.png'.")
    # Retourner le chemin du fichier g√©n√©r√©
    generated_image_path = os.path.abspath("generated_car.png")
    print(f"üìÅ Chemin du fichier g√©n√©r√© : {generated_image_path}")
    return generated_image_path

# Exemple d'utilisation : (mettre des vraies valeurs correspondant aux features du dataset)
features_example = [2015, 3, 1, 2, 1, 1, 4, 6]  # Ex : ann√©e, manufacturer, model, condition, etc.
description_example = "SUV noir, int√©rieur cuir, toit panoramique"

generate_car_image(features_example, description_example)
