"""
DOCUMENTATION

Lance FastAPI avec Uvicorn: uvicorn api:app --reload
"""
from fastapi import FastAPI
from pydantic import BaseModel
import numpy as np
import random
import string
import os
import keras
from diffusers import StableDiffusionPipeline
from fastapi.middleware.cors import CORSMiddleware

# Initialiser FastAPI
app = FastAPI()

# Activer CORS pour React
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],  
    allow_headers=["*"],  
)

# Charger le mod√®le de pr√©diction
model_path = "v1.keras"
model = keras.saving.load_model(model_path)
print("‚úÖ Mod√®le de pr√©diction charg√©.")

# Charger Stable Diffusion
pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")
try:
    pipe.to("cuda")  # Utiliser le GPU si disponible
except:
    print("ü™ß Echec de la tentative d'utilisation du GPU (CUDA), fallback sur le CPU")
print("‚úÖ Mod√®le Stable Diffusion charg√©.")

# Fonction pour g√©n√©rer un nom de fichier al√©atoire
def generate_random_filename(extension="png"):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=8)) + f".{extension}"

# Mod√®le de requ√™te (seule la description est requise)
class CarRequest(BaseModel):
    description: str  # Description d√©taill√©e du v√©hicule

# Endpoint de test
@app.get("/")
def healthcheck():
    return {"status": "It works"}

# Endpoint pour g√©n√©rer une image
@app.post("/generate")
def generate_car_image(request: CarRequest):
    # G√©n√©rer des features factices (jusqu'√† ce qu'on int√®gre du NLP)
    dummy_features = [2015, 3, 1, 2, 1, 1, 4, 6]  # Exemples de valeurs encod√©es

    # Pr√©dire le prix avec le mod√®le
    predicted_price = model.predict(np.array(dummy_features).reshape(1, -1))[0][0]
    print(f"üí∞ Prix pr√©dit : {int(predicted_price)}‚Ç¨")

    # Construire le prompt pour Stable Diffusion
    prompt = f"Voiture {request.description}, estim√©e √† {int(predicted_price)}‚Ç¨, design moderne et d√©taill√©"
    
    print(f"üöó G√©n√©ration de l'image pour : {prompt}")
    image = pipe(prompt).images[0]

    # Sauvegarder l'image avec un nom unique
    filename = generate_random_filename()
    image_path = f"static/{filename}"
    os.makedirs("static", exist_ok=True)  # Cr√©er le dossier si n√©cessaire
    image.save(image_path)
    print(f"‚úÖ Image g√©n√©r√©e et sauvegard√©e sous '{image_path}'.")

    # Retourner l'URL de l'image et le prix pr√©dit
    return {"image_url": f"http://localhost:8000/{image_path}", "predicted_price": int(predicted_price)}
